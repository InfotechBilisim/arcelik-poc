/****************************************************************************** 
	rtree.js -Non-Recursive Javascript R-Tree Library
	Version 1.0.0, March 15th 2013

	https://github.com/leaflet-extras/RTree.
******************************************************************************/

var RTree=function(a){var c=3;var b=6;if(!isNaN(a)){c=Math.floor(a/2);b=a}var f={x:0,y:0,w:0,h:0,id:"root",nodes:[]};var j=function(q){return Object.prototype.toString.call(q)==="[object Array]"};var i=(function(){var q={};return function(s){var r=0;if(s in q){r=q[s]++}else{q[s]=0}return s+"_"+r}})();RTree.Rectangle.squarified_ratio=function(r,q,v){var u=(r+q)/2;var t=r*q;var s=t/(u*u);return(t*v/s)};var e=function(w,s,x){var y=[];var u=[];var z=[];var A=1;var C,r,v;if(!w||!RTree.Rectangle.overlap_rectangle(w,x)){return z}var q={x:w.x,y:w.y,w:w.w,h:w.h,target:s};u.push(x.nodes.length);y.push(x);do{C=y.pop();r=u.pop()-1;if("target" in q){while(r>=0){v=C.nodes[r];if(RTree.Rectangle.overlap_rectangle(q,v)){if((q.target&&"leaf" in v&&v.leaf===q.target)||(!q.target&&("leaf" in v||RTree.Rectangle.contains_rectangle(v,q)))){if("nodes" in v){z=m(v,true,[],v);C.nodes.splice(r,1)}else{z=C.nodes.splice(r,1)}RTree.Rectangle.make_MBR(C.nodes,C);delete q.target;if(C.nodes.length<c){q.nodes=m(C,true,[],C)}break}else{if("nodes" in v){A+=1;u.push(r);y.push(C);C=v;r=v.nodes.length}}}r-=1}}else{if("nodes" in q){C.nodes.splice(r+1,1);if(C.nodes.length>0){RTree.Rectangle.make_MBR(C.nodes,C)}for(var B=0;B<q.nodes.length;B++){h(q.nodes[B],C)}q.nodes.length=0;if(y.length==0&&C.nodes.length<=1){q.nodes=m(C,true,q.nodes,C);C.nodes.length=0;y.push(C);u.push(1)}else{if(y.length>0&&C.nodes.length<c){q.nodes=m(C,true,q.nodes,C);C.nodes.length=0}else{delete q.nodes}}}else{RTree.Rectangle.make_MBR(C.nodes,C)}}A-=1}while(y.length>0);return(z)};var l=function(y,z){var u=-1;var x=[];var B;var C=function(E,D){return(function(F){E._attach_data(D,F)})};x.push(z);var q=z.nodes;do{if(u!=-1){x.push(q[u]);q=q[u].nodes;u=-1}for(var s=q.length-1;s>=0;s--){var w=q[s];if("leaf" in w){u=-1;break}var v=RTree.Rectangle.squarified_ratio(w.w,w.h,w.nodes.length+1);var t=Math.max(w.x+w.w,y.x+y.w)-Math.min(w.x,y.x);var r=Math.max(w.y+w.h,y.y+y.h)-Math.min(w.y,y.y);var A=RTree.Rectangle.squarified_ratio(t,r,w.nodes.length+2);if(u<0||Math.abs(A-v)<B){B=Math.abs(A-v);u=s}}}while(u!=-1);return(x)};var d=function(q){var r=k(q);while(q.length>0){g(q,r[0],r[1])}return(r)};var g=function(q,D,C){var u=RTree.Rectangle.squarified_ratio(D.w,D.h,D.nodes.length+1);var t=RTree.Rectangle.squarified_ratio(C.w,C.h,C.nodes.length+1);var s;var z;var E;for(var x=q.length-1;x>=0;x--){var r=q[x];var y={};y.x=Math.min(D.x,r.x);y.y=Math.min(D.y,r.y);y.w=Math.max(D.x+D.w,r.x+r.w)-y.x;y.h=Math.max(D.y+D.h,r.y+r.h)-y.y;var B=Math.abs(RTree.Rectangle.squarified_ratio(y.w,y.h,D.nodes.length+2)-u);var w={};w.x=Math.min(C.x,r.x);w.y=Math.min(C.y,r.y);w.w=Math.max(C.x+C.w,r.x+r.w)-w.x;w.h=Math.max(C.y+C.h,r.y+r.h)-w.y;var A=Math.abs(RTree.Rectangle.squarified_ratio(w.w,w.h,C.nodes.length+2)-t);if(!z||!s||Math.abs(A-B)<s){z=x;s=Math.abs(A-B);E=A<B?C:D}}var v=q.splice(z,1)[0];if(D.nodes.length+q.length+1<=c){D.nodes.push(v);RTree.Rectangle.expand_rectangle(D,v)}else{if(C.nodes.length+q.length+1<=c){C.nodes.push(v);RTree.Rectangle.expand_rectangle(C,v)}else{E.nodes.push(v);RTree.Rectangle.expand_rectangle(E,v)}}};var k=function(q){var s=q.length-1;var A=0;var r=q.length-1;var y=0;var w,v;for(var u=q.length-2;u>=0;u--){var t=q[u];if(t.x>q[A].x){A=u}else{if(t.x+t.w<q[s].x+q[s].w){s=u}}if(t.y>q[y].y){y=u}else{if(t.y+t.h<q[r].y+q[r].h){r=u}}}var z=Math.abs((q[s].x+q[s].w)-q[A].x);var x=Math.abs((q[r].y+q[r].h)-q[y].y);if(z>x){if(s>A){w=q.splice(s,1)[0];v=q.splice(A,1)[0]}else{v=q.splice(A,1)[0];w=q.splice(s,1)[0]}}else{if(r>y){w=q.splice(r,1)[0];v=q.splice(y,1)[0]}else{v=q.splice(y,1)[0];w=q.splice(r,1)[0]}}return([{x:w.x,y:w.y,w:w.w,h:w.h,nodes:[w]},{x:v.x,y:v.y,w:v.w,h:v.h,nodes:[v]}])};var p=function(r,q){r.nodes=q.nodes;r.x=q.x;r.y=q.y;r.w=q.w;r.h=q.h;return(r)};var m=function(v,s,u,w){var x=[];if(!RTree.Rectangle.overlap_rectangle(v,w)){return(u)}var y=function(A,z){return(function(B){A._attach_data(z,B)})};x.push(w.nodes);do{var q=x.pop();for(var r=q.length-1;r>=0;r--){var t=q[r];if(RTree.Rectangle.overlap_rectangle(v,t)){if("nodes" in t){x.push(t.nodes)}else{if("leaf" in t){if(!s){u.push(t.leaf)}else{u.push(t)}}}}}}while(x.length>0);return(u)};var h=function(q,w){var u;if(w.nodes.length===0){w.x=q.x;w.y=q.y;w.w=q.w;w.h=q.h;w.nodes.push(q);return}var s=l(q,w);var r=q;do{if(u&&"nodes" in u&&u.nodes.length===0){var z=u;u=s.pop();for(var y=0;y<u.nodes.length;y++){if(u.nodes[y]===z||u.nodes[y].nodes.length===0){u.nodes.splice(y,1);break}}}else{u=s.pop()}if("leaf" in r||"nodes" in r||j(r)){if(j(r)){for(var v=0;v<r.length;v++){RTree.Rectangle.expand_rectangle(u,r[v])}u.nodes=u.nodes.concat(r)}else{RTree.Rectangle.expand_rectangle(u,r);u.nodes.push(r)}if(u.nodes.length<=b){r={x:u.x,y:u.y,w:u.w,h:u.h}}else{var x=d(u.nodes);r=x;if(s.length<1){u.nodes.push(x[0]);s.push(u);r=x[1]}}}else{RTree.Rectangle.expand_rectangle(u,r);r={x:u.x,y:u.y,w:u.w,h:u.h}}}while(s.length>0)};this.get_tree=function(){return f};this.set_tree=function(r,q){if(!q){q=f}return(p(q,r))};this.search=function(w,q,v,x){if(arguments.length<1){throw"Wrong number of arguments. RT.Search requires at least a bounding rectangle."}var t,y,u,r;switch(arguments.length){case 1:return m.apply(this,[w,false,[],f]);case 2:if(typeof q==="function"){t=[w,false,[],f];y=q;break}else{return m.apply(this,[w,q,[],f])}case 3:if(typeof v==="function"){t=[w,q,[],f];y=v;break}else{return m.apply(this,[w,q,v,f])}case 4:t=[w,q,v,f];y=x;break}if(y){try{u=m.apply(this,t)}catch(s){r=s}finally{y(r,u)}}};this.toJSON=function(z,E){var B=[];var w=[];var A={};var s=3;var C=1;var r="";if(z&&!RTree.Rectangle.overlap_rectangle(z,f)){return""}if(!E){w.push(f.nodes.length);B.push(f.nodes);r+="var main_tree = {x:"+f.x.toFixed()+",y:"+f.y.toFixed()+",w:"+f.w.toFixed()+",h:"+f.h.toFixed()+",nodes:["}else{s+=4;w.push(E.nodes.length);B.push(E.nodes);r+="var main_tree = {x:"+E.x.toFixed()+",y:"+E.y.toFixed()+",w:"+E.w.toFixed()+",h:"+E.h.toFixed()+",nodes:["}do{var q=B.pop();var v=w.pop()-1;if(v>=0&&v<q.length-1){r+=","}while(v>=0){var y=q[v];if(!z||RTree.Rectangle.overlap_rectangle(z,y)){if(y.nodes){if(C>=s){var x=A.length;var u=i("saved_subtree");r+="{x:"+y.x.toFixed()+",y:"+y.y.toFixed()+",w:"+y.w.toFixed()+",h:"+y.h.toFixed()+",load:'"+u+".js'}";A[u]=this.toJSON(z,y);if(v>0){r+=","}}else{r+="{x:"+y.x.toFixed()+",y:"+y.y.toFixed()+",w:"+y.w.toFixed()+",h:"+y.h.toFixed()+",nodes:[";C+=1;w.push(v);B.push(q);q=y.nodes;v=y.nodes.length}}else{if(y.leaf){var t=y.leaf.toJSON?y.leaf.toJSON():JSON.stringify(y.leaf);r+="{x:"+y.x.toFixed()+",y:"+y.y.toFixed()+",w:"+y.w.toFixed()+",h:"+y.h.toFixed()+",leaf:"+t+"}";if(v>0){r+=","}}else{if(y.load){r+="{x:"+y.x.toFixed()+",y:"+y.y.toFixed()+",w:"+y.w.toFixed()+",h:"+y.h.toFixed()+",load:'"+y.load+"'}";if(v>0){r+=","}}}}}v-=1}if(v<0){r+="]}";C-=1}}while(B.length>0);r+=";";for(var D in A){r+="\nvar "+D+" = function(){"+A[D]+" return(main_tree);};"}return(r)};this.remove=function(t,v,w){var q,s,r,u;if(arguments.length<1){throw"Wrong number of arguments. RT.remove requires at least a bounding rectangle."}switch(arguments.length){case 1:s=[t,false,f];break;case 2:if(typeof arguments[1]==="function"){q=v;v=false}s=[t,v,f];break;case 3:if(typeof w==="function"){q=w}s=[t,v,f];break}if(s[1]===false){r=0;u=[];do{r=u.length;u=u.concat(e.apply(this,s))}while(r!=u.length);if(!q){return u}else{q(null,u)}}else{if(!q){return(e.apply(this,s))}else{q(null,e.apply(this,s))}}};this.insert=function(r,u,v){var q,s;if(arguments.length<2){throw"Wrong number of arguments. RT.Insert requires at least a bounding rectangle and an object."}if(!v){return(h({x:r.x,y:r.y,w:r.w,h:r.h,leaf:u},f)||true)}else{try{q=(h({x:r.x,y:r.y,w:r.w,h:r.h,leaf:u},f))}catch(t){s=t}finally{v(s,q)}}};var n=function(t,w){if(w&&w.bbox){return{leaf:w,x:w.bbox[0],y:w.bbox[1],w:w.bbox[2]-w.bbox[0],h:w.bbox[3]-w.bbox[1]}}var r=t.length;var v=0;var s=new Array(r);while(v<r){s[v]=[t[v][0],t[v][1]];v++}var x=s[0];r=s.length;v=1;var q={min:[].concat(x),max:[].concat(x)};while(v<r){if(s[v][0]<q.min[0]){q.min[0]=s[v][0]}else{if(s[v][0]>q.max[0]){q.max[0]=s[v][0]}}if(s[v][1]<q.min[1]){q.min[1]=s[v][1]}else{if(s[v][1]>q.max[1]){q.max[1]=s[v][1]}}v++}var u={x:q.min[0],y:q.min[1],w:(q.max[0]-q.min[0]),h:(q.max[1]-q.min[1])};if(w){u.leaf=w}return u};var o={};o.point=function(q){return(h({x:q.geometry.coordinates[0],y:q.geometry.coordinates[1],w:0,h:0,leaf:q},f))};o.multiPointLineString=function(q){return(h(n(q.geometry.coordinates,q),f))};o.multiLineStringPolygon=function(q){return(h(n(Array.prototype.concat.apply([],q.geometry.coordinates),q),f))};o.multiPolygon=function(q){return(h(n(Array.prototype.concat.apply([],Array.prototype.concat.apply([],q.geometry.coordinates)),q),f))};o.makeRec=function(q){return new RTree.Rectangle(q.x,q.y,q.w,q.h)};o.geometryCollection=function(u){if(u.bbox){return(h({leaf:u,x:u.bbox[0],y:u.bbox[1],w:u.bbox[2]-u.bbox[0],h:u.bbox[3]-u.bbox[1]},f))}var w=u.geometry.geometries;var s=0;var r=w.length;var q=[];var t;while(s<r){t=w[s];switch(t.type){case"Point":q.push(o.makeRec({x:t.coordinates[0],y:t.coordinates[1],w:0,h:0}));break;case"MultiPoint":q.push(o.makeRec(n(t.coordinates)));break;case"LineString":q.push(o.makeRec(n(t.coordinates)));break;case"MultiLineString":q.push(o.makeRec(n(Array.prototype.concat.apply([],t.coordinates))));break;case"Polygon":q.push(o.makeRec(n(Array.prototype.concat.apply([],t.coordinates))));break;case"MultiPolygon":q.push(o.makeRec(n(Array.prototype.concat.apply([],Array.prototype.concat.apply([],t.coordinates)))));break;case"GeometryCollection":w=w.concat(t.geometries);r=w.length;break}s++}var v=q[0];s=1;r=q.length;while(s<r){v.expand(q[s]);s++}return h({leaf:u,x:v.x(),y:v.y(),h:v.h(),w:v.w()},f)};this.geoJSON=function(u,v){v=v||function(){return true};var t,s;if(j(u)){t=u.slice()}else{if(u.features&&j(u.features)){t=u.features.slice()}else{throw ("this isn't what we're looking for")}}var q=t.length;var r=0;while(r<q){s=t[r];if(s.type==="Feature"){switch(s.geometry.type){case"Point":o.point(s);break;case"MultiPoint":o.multiPointLineString(s);break;case"LineString":o.multiPointLineString(s);break;case"MultiLineString":o.multiLineStringPolygon(s);break;case"Polygon":o.multiLineStringPolygon(s);break;case"MultiPolygon":o.multiPolygon(s);break;case"GeometryCollection":o.geometryCollection(s);break}}r++}return v(null,true)};this.bbox=function(){var s,u,r,t,w,q,v;switch(arguments.length){case 0:throw ("not enough arguments");case 1:s=arguments[0][0][0];u=arguments[0][0][1];r=arguments[0][1][0];t=arguments[0][1][1];break;case 2:if(typeof arguments[1]==="function"){s=arguments[0][0][0];u=arguments[0][0][1];r=arguments[0][1][0];t=arguments[0][1][1];w=arguments[1];break}else{s=arguments[0][0];u=arguments[0][1];r=arguments[1][0];t=arguments[1][1];break}case 3:s=arguments[0][0];u=arguments[0][1];r=arguments[1][0];t=arguments[1][1];w=arguments[2];break;case 4:s=arguments[0];u=arguments[1];r=arguments[2];t=arguments[3];break;case 5:s=arguments[0];u=arguments[1];r=arguments[2];t=arguments[3];w=arguments[4];break}if(!w){return this.search({x:s,y:u,w:r-s,h:t-u})}else{this.search({x:s,y:u,w:r-s,h:t-u},w)}}};var rTree=function(b,f){var a,c;if(typeof b==="function"){f=b;b=undefined}if(!f){return new RTree(b)}else{try{a=new RTree(b)}catch(d){c=d}finally{f(c,a)}}};RTree.Rectangle=function(c,b,d,k){var i,a,f,g,j,e;if(c.x){i=c.x;f=c.y;if(c.w!==0&&!c.w&&c.x2){j=c.x2-c.x;e=c.y2-c.y}else{j=c.w;e=c.h}a=i+j;g=f+e}else{i=c;f=b;j=d;e=k;a=i+j;g=f+e}this.x1=this.x=function(){return i};this.y1=this.y=function(){return f};this.x2=function(){return a};this.y2=function(){return g};this.w=function(){return j};this.h=function(){return e};this.toJSON=function(){return('{"x":'+i.toString()+', "y":'+f.toString()+', "w":'+j.toString()+', "h":'+e.toString()+"}")};this.overlap=function(h){return(this.x()<h.x2()&&this.x2()>h.x()&&this.y()<h.y2()&&this.y2()>h.y())};this.expand=function(l){var h=Math.min(this.x(),l.x());var m=Math.min(this.y(),l.y());j=Math.max(this.x2(),l.x2())-h;e=Math.max(this.y2(),l.y2())-m;i=h;f=m;return(this)};this.setRect=function(n,m,o,u){var s,l,q,r,t,p;if(n.x){s=n.x;q=n.y;if(n.w!==0&&!n.w&&n.x2){t=n.x2-n.x;p=n.y2-n.y}else{t=n.w;p=n.h}l=s+t;r=q+p}else{s=n;q=m;t=o;p=u;l=s+t;r=q+p}}};RTree.Rectangle.overlap_rectangle=function(d,c){if((d.h===0&&d.w===0)||(c.h===0&&c.w===0)){return(d.x<=(c.x+c.w)&&(d.x+d.w)>=c.x&&d.y<=(c.y+c.h)&&(d.y+d.h)>=c.y)}else{return(d.x<(c.x+c.w)&&(d.x+d.w)>c.x&&d.y<(c.y+c.h)&&(d.y+d.h)>c.y)}};RTree.Rectangle.contains_rectangle=function(d,c){return((d.x+d.w)<=(c.x+c.w)&&d.x>=c.x&&(d.y+d.h)<=(c.y+c.h)&&d.y>=c.y)};RTree.Rectangle.expand_rectangle=function(e,d){var c=Math.min(e.x,d.x);var f=Math.min(e.y,d.y);e.w=Math.max(e.x+e.w,d.x+d.w)-c;e.h=Math.max(e.y+e.h,d.y+d.h)-f;e.x=c;e.y=f;return(e)};RTree.Rectangle.make_MBR=function(a,c){if(a.length<1){return({x:0,y:0,w:0,h:0})}if(!c){c={x:a[0].x,y:a[0].y,w:a[0].w,h:a[0].h}}else{c.x=a[0].x}c.y=a[0].y;c.w=a[0].w;c.h=a[0].h;for(var b=a.length-1;b>0;b--){RTree.Rectangle.expand_rectangle(c,a[b])}return(c)};if(typeof module!=="undefined"&&module.exports){module.exports=rTree};
